extends layout

block content
    style.
        ul {
            list-style: outside none none;
        }

        @media (max-width: 975px) {
            ul {
                max-width: 925px;
                margin-right: 25px;
            }
        }

        @media (min-width: 975px) {
            ul {
                margin-right: 30px;
            }
        }

    ul
        each review in review_list
            li(style="margin: auto")
                a(href=review.url style="text-decoration: none")
                    div(class="w3-container w3-white w3-margin w3-padding-large" style="border-radius:.5rem; box-shadow: 0 3px 10px rgb(0 0 0 / 0.2); margin:auto;")
                        div(class="w3-center")
                            h3 #{review.title}
                        h5.rbd-heading #[strong Product type:] #{review.product}
                        h5.rbd-heading #[strong Date:] #{review.date}
        else
            div()
                li There are no reviews.


    div(class="w3-container w3-content")
        h2(class="w3-center") Still haven't found what you're looking for?
        h5(class="w3-center") Take a look at the video below and get some inspiration!
        div(id="player" style="padding:10px; width:100%;")

    script.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                videoId: '2WOqP_AfWFs',
                playerVars: {
                    'autoplay':0
                },
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
                setTimeout(stopVideo, 0);
                done = true;
            }
        }
        function stopVideo() {
            player.stopVideo();
        }